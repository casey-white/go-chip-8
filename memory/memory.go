package memory

import (
	"io"
	"log"
	"os"
)

type Memory [4096]byte

func NewMemory(filename string) Memory {
	var memory Memory
	memory = LoadFont(memory)
	memory = LoadRom(memory, filename)

	return memory
}

func LoadFont(memory Memory) Memory {

	font := [80]byte{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80, // F
	}

	for i := 0; i < 80; i++ {
		memory[0x50+i] = font[i]
	}

	return memory

}

func LoadRom(memory Memory, filename string) Memory {

	file, err := os.Open(filename)
	if err != nil {
		log.Fatalf("Error opening %s: %s", filename, err)
	}
	defer file.Close()

	_, err = io.ReadFull(file, memory[0x200:])
	if err != nil && err != io.EOF && err != io.ErrUnexpectedEOF {
		log.Fatalf("Error reading %s: %s", filename, err)
	}

	return memory
}
